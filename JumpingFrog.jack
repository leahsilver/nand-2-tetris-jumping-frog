class JumpingFrog {
  /*
  Models the JumpingFrog and creates/updates the frog image.
  */

  field int y_offset;           // Y-coordinate on screen
  field int x_offset;           // X-coordinate on screen
  field int size_x;             // Width of frog image.
  field int size_y;             // Height of frog image.
  field int jumping_state;      // Which leap image is currently displayed.
  field Array up_state;         // Image coords for leap `up` state.
  field Array mid_state;        // Image coords for leap `middle` state.
  field Array down_state;       // Image coords for leap `down` state.
  field Array frog_vector;      // Image coords for current leap state.
  field int memAddress;
  /*
  JumpingFrog object constructor.

  @param int altitude Y coordinate to first show frog image.
  */
  constructor JumpingFrog new(int altitude) {
    let y_offset = altitude;
    let x_offset = 160;
    let size_x = 16;
    let size_y = 16;

    let jumping_state = 1;
    do buildUpArray();
    do buildMidArray();
    do buildDownArray();

    do draw();
    return this;
  }

  /*
  Move frog image coordinates up.
  */
  method void moveUp()
  {
    do erase();
    if (y_offset > 30) {
      let y_offset = y_offset - 30;
    } else {
      let y_offset = 0;
    }

    return;
  }

  /*
  Move frog image coordinates down.
  */
  method void moveDown()
  {
    do erase();
    if (y_offset < (255 - size_y - 5)) {
      let y_offset = y_offset + 5;
    } else {
      let y_offset = 255 - size_y;
    }

    return;
  }

  /*
  Erase frog image.
  */
  method void erase()
  {
    do Screen.setColor(false);
    do Screen.drawRectangle(x_offset, y_offset, x_offset + size_x, y_offset + size_y);

    return;
  }

  /*
  Build Array of leap 'up' state image coordinates.
  */

  method void buildUpArray() {

    let up_state = Array.new(16);

    let up_state[0] = 1584;
    let up_state[1] = 4092;
    let up_state[2] = 4098;
    let up_state[3] = 4098;
    let up_state[4] = 3060;
    let up_state[5] = 1032;
    let up_state[6] = 1008;
    let up_state[7] = 3084;
    let up_state[8] = 3612;
    let up_state[9] = 2580;
    let up_state[10] = 2868;
    let up_state[11] = 3368;
    let up_state[12] = 1560;
    let up_state[13] = 3060;
    let up_state[14] = 3084;
    let up_state[15] = 2052;

    return;
  }

 

 /*
  Build Array of leap 'middle' state image coordinates.
  */
  method void buildMidArray() {

    let mid_state = Array.new(16);

    let mid_state[0] = 1584;
    let mid_state[1] = 4092;
    let mid_state[2] = 4098;
    let mid_state[3] = 4098;
    let mid_state[4] = 3060;
    let mid_state[5] = 1032;
    let mid_state[6] = 1008;
    let mid_state[7] = 3084;
    let mid_state[8] = 3612;
    let mid_state[9] = 14871;
    let mid_state[10] = 11061;
    let mid_state[11] = 11561;
    let mid_state[12] = 4626;
    let mid_state[13] = 3564;
    let mid_state[14] = 15375;
    let mid_state[15] = 0;

    return;
  }

  /*
  Build Array of leap 'down' state image coordinates.
  */
 
  method void buildDownArray() {

    let down_state = Array.new(16);

    let down_state[0] = 1584;
    let down_state[1] = 4092;
    let down_state[2] = 4098;
    let down_state[3] = 4098;
    let down_state[4] = 3060;
    let down_state[5] = 1032;
    let down_state[6] = 1008;
    let down_state[7] = 3084;
    let down_state[8] = 3612;
    let down_state[9] = 2580;
    let down_state[10] = 2868;
    let down_state[11] = 3368;
    let down_state[12] = 1560;
    let down_state[13] = 3060;
    let down_state[14] = 7182;
    let down_state[15] = 12291;

    return;
  }
  method void draw() {
    let frog_vector = getFrogVector();
	let memAddress = (16384 + (y_offset * 32) + (x_offset/16));
	do Memory.poke(memAddress+0, frog_vector[0]);
	do Memory.poke(memAddress+32, frog_vector[1]);
	do Memory.poke(memAddress+64, frog_vector[2]);
	do Memory.poke(memAddress+96, frog_vector[3]);
	do Memory.poke(memAddress+128, frog_vector[4]);
	do Memory.poke(memAddress+160, frog_vector[5]);
	do Memory.poke(memAddress+192, frog_vector[6]);
	do Memory.poke(memAddress+224, frog_vector[7]);
	do Memory.poke(memAddress+256, frog_vector[8]);
	do Memory.poke(memAddress+288, frog_vector[9]);
	do Memory.poke(memAddress+320, frog_vector[10]);
	do Memory.poke(memAddress+352, frog_vector[11]);
	do Memory.poke(memAddress+384, frog_vector[12]);
	do Memory.poke(memAddress+416, frog_vector[13]);
	do Memory.poke(memAddress+448, frog_vector[14]);
	do Memory.poke(memAddress+480, frog_vector[15]);
	return;
}
  /*
  Cycle frog leap state to next in loop.
  */
  method void cycleLeapsState()
  {
    if (jumping_state = 3) {
      let jumping_state = 1;
    } else {
      let jumping_state = jumping_state + 1;
    }

    return;
  }

  /*
  Return image coordinates for current leap state.
  */
  method Array getFrogVector()
  {
    if (jumping_state = 1) {
      return up_state;
    }

    if (jumping_state = 2) {
      return mid_state;
    }

    return down_state;
  }

 
  /*
  Get image X-coordinate.
  */
  method int getXOffset()
  {
    return x_offset;
  }

  /*
  Get image Y-coordinate.
  */
  method int getYOffset()
  {
    return y_offset;
  }

  /*
  Get image width.
  */
  method int getSizeX()
  {
    return size_x;
  }

  /*
  Get image height.
  */
  method int getSizeY()
  {
    return size_y;
  }

  /*
  Dispose of JumpingFrog object.
  */
  method void dispose() {
     do Memory.deAlloc(this);
     return;
  }
}
